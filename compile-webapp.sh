#!/bin/bash

# =====================================================
# SCRIPT DE COMPILACI√ìN - WEBAPP EUROPBOTS
# =====================================================
# Este script compila y reinicia la WebApp de EUROPBOTS
# Incluye: compilaci√≥n, reinicio y verificaci√≥n
# =====================================================

set -e  # Salir si hay alg√∫n error

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Funci√≥n para imprimir mensajes
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Funci√≥n para limpiar im√°genes sin etiqueta al inicio
cleanup_docker_before() {
    print_status "üßπ Limpiando im√°genes sin etiqueta al inicio..."

    # Verificar si estamos en un entorno Docker
    if [ -f "../docker-compose.yml" ]; then
        cd ..

        # Eliminar solo im√°genes sin etiqueta (dangling images)
        local dangling_images=$(docker images -f "dangling=true" -q 2>/dev/null || echo "")
        if [ ! -z "$dangling_images" ] && [ "$dangling_images" != "" ]; then
            print_status "Eliminando im√°genes sin etiqueta..."
            echo "$dangling_images" | xargs -r docker rmi 2>/dev/null || print_warning "‚ö†Ô∏è Algunas im√°genes no se pudieron eliminar"
            print_success "‚úÖ Im√°genes sin etiqueta eliminadas"
        else
            print_status "No hay im√°genes sin etiqueta para eliminar"
        fi

        cd web_app
    else
        print_warning "‚ö†Ô∏è No se encontr√≥ docker-compose.yml. Omitiendo limpieza de Docker."
    fi
}

# Funci√≥n para verificar requisitos
check_requirements() {
    print_status "Verificando requisitos del sistema..."

    # Verificar que estemos en el directorio correcto
    if [ ! -f "package.json" ]; then
        print_error "No se encontr√≥ package.json. Aseg√∫rate de estar en el directorio web_app."
        exit 1
    fi

    # Verificar Node.js
    if ! command -v node >/dev/null 2>&1; then
        print_error "Node.js no est√° instalado. Por favor instala Node.js."
        exit 1
    fi

    # Verificar npm
    if ! command -v npm >/dev/null 2>&1; then
        print_error "npm no est√° instalado. Por favor instala npm."
        exit 1
    fi

    print_success "Todos los requisitos est√°n cumplidos"
}

# Funci√≥n para instalar dependencias
install_dependencies() {
    print_status "üì¶ Instalando dependencias..."

    if npm install; then
        print_success "‚úÖ Dependencias instaladas exitosamente"
    else
        print_error "‚ùå Error al instalar dependencias"
        exit 1
    fi
}

# Funci√≥n para compilar la aplicaci√≥n
build_app() {
    print_status "üî® Compilando aplicaci√≥n Next.js..."

    if npm run build; then
        print_success "‚úÖ Aplicaci√≥n compilada exitosamente"
    else
        print_error "‚ùå Error en la compilaci√≥n"
        exit 1
    fi
}

# Funci√≥n para recompilar la imagen Docker
rebuild_docker() {
    print_status "üê≥ Reconstruyendo imagen Docker de webapp..."

    # Verificar si estamos en un entorno Docker
    if [ -f "../docker-compose.yml" ]; then
        cd ..
        # Recompilar sin cach√© para asegurar que los cambios se reflejen
        if docker compose build webapp --no-cache; then
            print_success "‚úÖ Imagen Docker reconstruida exitosamente"
        else
            print_error "‚ùå Error al reconstruir la imagen Docker"
            exit 1
        fi
        cd web_app
    else
        print_warning "‚ö†Ô∏è No se encontr√≥ docker-compose.yml. Omitiendo recompilaci√≥n Docker."
    fi
}

# Funci√≥n para reiniciar el servicio
restart_service() {
    print_status "üîÑ Reiniciando servicio webapp con nueva imagen..."

    # Verificar si estamos en un entorno Docker
    if [ -f "../docker-compose.yml" ]; then
        cd ..
        # Primero detener el contenedor
        print_status "‚èπÔ∏è Deteniendo contenedor existente..."
        docker compose down webapp 2>/dev/null || true
        
        # Luego iniciarlo con la nueva imagen
        print_status "üöÄ Iniciando con nueva imagen..."
        if docker compose up webapp -d; then
            print_success "‚úÖ Servicio reiniciado exitosamente con nueva imagen"
        else
            print_error "‚ùå Error al reiniciar el servicio"
            exit 1
        fi
        cd web_app
    else
        print_warning "‚ö†Ô∏è No se encontr√≥ docker-compose.yml. Reinicia manualmente el servicio."
    fi
}

# Funci√≥n para verificar el servicio
check_service() {
    print_status "üîç Verificando estado del servicio..."

    # Esperar a que el servicio se inicie
    print_status "‚è≥ Esperando 10 segundos para que el servicio se inicie completamente..."
    sleep 10

    # Verificar si estamos en un entorno Docker
    if [ -f "../docker-compose.yml" ]; then
        cd ..
        echo ""
        print_status "üìä Estado del contenedor:"
        docker compose ps webapp
        cd web_app
    fi

    # Verificar health check
    echo ""
    print_status "üè• Verificando health check..."

    if curl -f http://localhost:3000 >/dev/null 2>&1; then
        print_success "‚úÖ WebApp est√° respondiendo correctamente"

        # Mostrar informaci√≥n de la respuesta
        echo ""
        print_status "üìÑ Informaci√≥n de la respuesta:"
        curl -s -I http://localhost:3000 | head -5
    else
        print_warning "‚ö†Ô∏è WebApp no responde a√∫n (puede estar iniciando)"
    fi
}

# Funci√≥n para mostrar informaci√≥n final
show_final_info() {
    echo ""
    echo "====================================================="
    print_success "üéâ COMPILACI√ìN WEBAPP EUROPBOTS COMPLETADA"
    echo "====================================================="
    echo ""
    echo "üì± Servicios disponibles:"
    echo "   ‚Ä¢ WebApp Next.js: http://localhost:3000"
    echo "   ‚Ä¢ API Phantombuster: http://localhost:3001"
    echo "   ‚Ä¢ n8n Workflows: http://localhost:5678"
    echo "   ‚Ä¢ PgAdmin: http://localhost:8080"
    echo ""
    echo "üîß Comandos √∫tiles:"
    echo "   ‚Ä¢ Ver logs: docker compose logs webapp -f"
    echo "   ‚Ä¢ Reiniciar: docker compose up webapp -d (con nueva imagen)"
    echo "   ‚Ä¢ Estado: docker compose ps webapp"
    echo "   ‚Ä¢ Health check: curl http://localhost:3000"
    echo ""
    echo "üåê Caract√©ristiques:"
    echo "   ‚Ä¢ Interface en fran√ßais"
    echo "   ‚Ä¢ Design futuriste"
    echo "   ‚Ä¢ Responsive design"
    echo "   ‚Ä¢ Animations fluides"
    echo ""
    echo "üìä Pages principales:"
    echo "   ‚Ä¢ Dashboard: /"
    echo "   ‚Ä¢ Leads: /leads"
    echo "   ‚Ä¢ Configuration: /config"
    echo "   ‚Ä¢ Analytics: /analytics"
    echo "   ‚Ä¢ Recherche: /search"
    echo ""
    echo "üîí Authentification:"
    echo "   ‚Ä¢ Login: /login"
    echo "   ‚Ä¢ Register: /register"
    echo "   ‚Ä¢ Mot de passe oubli√©: /forgot-password"
    echo ""
    echo "====================================================="
}

# Funci√≥n para mostrar ayuda
show_help() {
    echo "Uso: $0 [OPCI√ìN]"
    echo ""
    echo "Opciones:"
    echo "  build       - Compilar y reiniciar (default, incluye --no-cache)"
    echo "  deps        - Solo instalar dependencias"
    echo "  restart     - Solo reiniciar servicio (incluye recompilaci√≥n Docker)"
    echo "  check       - Solo verificar estado"
    echo "  help        - Mostrar esta ayuda"
    echo ""
    echo "Ejemplos:"
    echo "  $0         - Compilaci√≥n completa"
    echo "  $0 deps    - Solo instalar dependencias"
    echo "  $0 restart - Solo reiniciar"
    echo "  $0 check   - Solo verificar"
}

# Funci√≥n principal
main() {
    case "${1:-build}" in
        "build")
            echo "====================================================="
            echo "üöÄ COMPILACI√ìN WEBAPP EUROPBOTS"
            echo "====================================================="
            echo ""

            check_requirements
            cleanup_docker_before
            install_dependencies
            build_app
            rebuild_docker
            restart_service
            check_service
            show_final_info

            print_success "¬°Compilaci√≥n completada exitosamente!"
            ;;
        "deps")
            echo "====================================================="
            echo "üì¶ INSTALACI√ìN DE DEPENDENCIAS"
            echo "====================================================="
            echo ""

            check_requirements
            install_dependencies
            print_success "¬°Dependencias instaladas exitosamente!"
            ;;
        "restart")
            echo "====================================================="
            echo "üîÑ REINICIO WEBAPP EUROPBOTS"
            echo "====================================================="
            echo ""

            check_requirements
            rebuild_docker
            restart_service
            check_service
            show_final_info

            print_success "¬°Reinicio completado exitosamente!"
            ;;
        "check")
            echo "====================================================="
            echo "üîç VERIFICACI√ìN WEBAPP EUROPBOTS"
            echo "====================================================="
            echo ""

            check_requirements
            check_service
            show_final_info

            print_success "¬°Verificaci√≥n completada!"
            ;;
        "help"|"-h"|"--help")
            show_help
            ;;
        *)
            print_error "Opci√≥n desconocida: $1"
            echo ""
            show_help
            exit 1
            ;;
    esac
}

# Ejecutar funci√≥n principal
main "$@"
